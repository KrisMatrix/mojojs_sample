import type { MojoApp } from './types.js';
declare type Hook = (...args: any[]) => any;
/**
 * Hook class.
 */
export declare class Hooks {
    _hooks: Record<string, Hook[]>;
    _lifecycleHookScore: number;
    /**
     * Add hook.
     */
    addHook(name: string, fn: Hook): void;
    /**
     * Run `command:start` hook with dependencies. Note that this method is EXPERIMENTAL and might change without
     * warning!
     */
    commandBefore(app: MojoApp, commandArgs: string[]): Promise<any>;
    /**
     * Run `command:stop` hook with dependencies. Note that this method is EXPERIMENTAL and might change without
     * warning!
     */
    commandAfter(app: MojoApp, commandArgs: string[]): Promise<void>;
    /**
     * Run hook.
     */
    runHook(name: string, ...args: any[]): Promise<any>;
    /**
     * Run `server:start` hook with dependencies. Note that this method is EXPERIMENTAL and might change without warning!
     */
    serverStart(app: MojoApp): Promise<void>;
    /**
     * Run `server:stop` hook with dependencies. Note that this method is EXPERIMENTAL and might change without warning!
     */
    serverStop(app: MojoApp): Promise<void>;
    _appStart(app: MojoApp): Promise<void>;
    _appStop(app: MojoApp): Promise<void>;
    _prepareHook(chain: Hook[]): (...args: any[]) => Promise<any>;
}
export {};
